version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: trading_db
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: trading_pass
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user -d trading_db"]
      interval: 5s
      retries: 5
      timeout: 3s
    networks:
      - trading_network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      retries: 5
      timeout: 3s
    networks:
      - trading_network

  # FastAPI Matching Engine
  matching_engine:
    build:
      context: .
      dockerfile: engine/Dockerfile
    environment:
      REDIS_URL: redis://redis:6379/0
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "8001:9000"
    networks:
      - trading_network
    restart: unless-stopped

  # Django Exchange Service
  exchange:
    build:
      context: .
      dockerfile: exchange/Dockerfile
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://trading_user:trading_pass@postgres:5432/trading_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      REDIS_URL: redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - ./exchange:/app
    networks:
      - trading_network
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    restart: unless-stopped

  # Trade Consumer Service
  trade_consumer:
    build:
      context: .
      dockerfile: exchange/Dockerfile
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://trading_user:trading_pass@postgres:5432/trading_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      exchange:
        condition: service_started
    networks:
      - trading_network
    command: python manage.py consume_trades
    restart: unless-stopped

volumes:
  pgdata:

networks:
  trading_network:
    driver: bridge